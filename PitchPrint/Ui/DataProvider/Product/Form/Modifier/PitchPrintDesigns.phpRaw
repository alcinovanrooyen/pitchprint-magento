<?php

/*
 * Reference for this code template:
 *	https://blog.mageworx.com/2016/08/an-easy-way-to-add-a-fieldset-with-fields-to-the-ui-form/
 *
 */

namespace PitchPrintInc\PitchPrint\Ui\DataProvider\Product\Form\Modifier;

use Magento\Catalog\Model\Locator\LocatorInterface;
use Magento\Catalog\Ui\DataProvider\Product\Form\Modifier\AbstractModifier;
use Magento\Framework\Stdlib\ArrayManager;
use Magento\Framework\UrlInterface;
use Magento\Ui\Component\Container;
use Magento\Ui\Component\Form\Fieldset;
use Magento\Ui\Component\Form\Field;
//use Magento\Ui\Component\Form\Element\DataType\Number;
use Magento\Ui\Component\Form\Element\DataType\Text;
use Magento\Ui\Component\Form\Element\Input;
use Magento\Ui\Component\Form\Element\Select;
//use Magento\Ui\Component\Form\Element\MultiSelect;

class PitchPrintDesigns extends AbstractModifier
{

    // Components indexes
    const CUSTOM_FIELDSET_INDEX = 'pitch_print_fieldset';
    const CUSTOM_FIELDSET_CONTENT = 'pitch_print_fieldset_content';
    const CONTAINER_HEADER_NAME = 'pitch_print_fieldset_content_header';

    // Fields names
//     const FIELD_NAME_TEXT = 'example_text_field';
    const FIELD_NAME_SELECT = 'pitch-print_design_id';
//     const FIELD_NAME_MULTISELECT = 'example_multiselect_field';

	const PP_FIRST_SELECT_ELEMENT = [ [ 'value' => 0, 'label' => 'None' ] ];

    /**
     * @var \Magento\Catalog\Model\Locator\LocatorInterface
     */
    protected $locator;

    /**
     * @var ArrayManager
     */
    protected $arrayManager;

    /**
     * @var UrlInterface
     */
    protected $urlBuilder;

    /**
     * @var array
     */
    protected $meta = [];

    /**
     * @param LocatorInterface $locator
     * @param ArrayManager $arrayManager
     * @param UrlInterface $urlBuilder
     */
    public function __construct(
        LocatorInterface $locator,
        ArrayManager $arrayManager,
        UrlInterface $urlBuilder
    ) {
        $this->locator = $locator;
        $this->arrayManager = $arrayManager;
        $this->urlBuilder = $urlBuilder;
    }

    /**
     * Data modifier, does nothing in our example.
     *
     * @param array $data
     * @return array
     */
    public function modifyData(array $data)
    {
        return $data;
    }

    /**
     * Meta-data modifier: adds ours fieldset
     *
     * @param array $meta
     * @return array
     */
    public function modifyMeta(array $meta)
    {
        $this->meta = $meta;
        $this->addCustomFieldset();

        return $this->meta;
    }

    /**
     * Merge existing meta-data with our meta-data (do not overwrite it!)
     *
     * @return void
     */
    protected function addCustomFieldset()
    {
        $this->meta = array_merge_recursive(
            $this->meta,
            [
                static::CUSTOM_FIELDSET_INDEX => $this->getFieldsetConfig(),
            ]
        );
    }

    /**
     * Declare ours fieldset config
     *
     * @return array
     */
    protected function getFieldsetConfig()
    {
        return [
            'arguments' => [
                'data' => [
                    'config' => [
                        'label' => __('Fieldset Title'),
                        'componentType' => Fieldset::NAME,
                        'dataScope' => static::DATA_SCOPE_PRODUCT, // save data in the product data
                        'provider' => static::DATA_SCOPE_PRODUCT . '_data_source',
                        'ns' => static::FORM_NAME,
                        'collapsible' => true,
                        'sortOrder' => 10,
                        'opened' => true,
                    ],
                ],
            ],
            'children' => [
                static::CONTAINER_HEADER_NAME => $this->getHeaderContainerConfig(10),
//                 static::FIELD_NAME_TEXT => $this->getTextFieldConfig(20),
                static::FIELD_NAME_SELECT => $this->getSelectFieldConfig(30),
//                 static::FIELD_NAME_MULTISELECT => $this->getMultiSelectFieldConfig(40),
            ],
        ];
    }

    /**
     * Get config for header container
     *
     * @param int $sortOrder
     * @return array
     */
    protected function getHeaderContainerConfig($sortOrder)
    {
        return [
            'arguments' => [
                'data' => [
                    'config' => [
                        'label' => null,
                        'formElement' => Container::NAME,
                        'componentType' => Container::NAME,
                        'template' => 'ui/form/components/complex',
                        'sortOrder' => $sortOrder,
                        'content' => __('You can write any text here'),
                    ],
                ],
            ],
            'children' => [],
        ];
    }

    /**
     * Example text field config
     *
     * @param $sortOrder
     * @return array
     */
    protected function getTextFieldConfig($sortOrder)
    {
        return [
            'arguments' => [
                'data' => [
                    'config' => [
                        'label' => __('Example Text Field'),
                        'formElement' => Field::NAME,
                        'componentType' => Input::NAME,
                        'dataScope' => static::FIELD_NAME_TEXT,
                        'dataType' => Number::NAME,
                        'sortOrder' => $sortOrder,
                    ],
                ],
            ],
        ];
    }

    /**
     * Example select field config
     *
     * @param $sortOrder
     * @return array
     */
    protected function getSelectFieldConfig($sortOrder)
    {
        return [
            'arguments' => [
                'data' => [
                    'config' => [
                        'label' => __('Choose a design'),
                        'componentType' => Field::NAME,
                        'formElement' => Select::NAME,
                        'dataScope' => static::FIELD_NAME_SELECT,
                        'dataType' => Text::NAME,
                        'sortOrder' => $sortOrder,
                        'options' => $this->getPpDesigns(),
                        'visible' => true,
                        'disabled' => false,
                    ],
                ],
            ],
        ];
    }

    /**
     * Example multi-select field config
     *
     * @param $sortOrder
     * @return array
     */
    protected function getMultiSelectFieldConfig($sortOrder)
    {
        return [
            'arguments' => [
                'data' => [
                    'config' => [
                        'label' => __('Options Multiselect'),
                        'componentType' => Field::NAME,
                        'formElement' => MultiSelect::NAME,
                        'dataScope' => static::FIELD_NAME_MULTISELECT,
                        'dataType' => Text::NAME,
                        'sortOrder' => $sortOrder,
                        'options' => $this->_getOptions(),
                        'visible' => true,
                        'disabled' => false,
                    ],
                ],
            ],
        ];
    }

    /**
     * Get example options as an option array:
     *      [
     *          label => string,
     *          value => option_id
     *      ]
     *
     * @return array
     */
    protected function _getOptions()
    {
        $options = [
            1 => [
                'label' => __('Option 1'),
                'value' => 1
            ],
            2 => [
                'label' => __('Option 2'),
                'value' => 2
            ],
            3 => [
                'label' => __('Option 3'),
                'value' => 3
            ],
        ];

        return $options;
    }

    //protected $noDesigns = [ [ 'value' => 0, 'label' => 'None' ] ];
    
//     public function modifyMeta(array $meta)
//     {

//         $meta['test_fieldset_name'] = [
//             'arguments' => [
//                 'data' => [
//                     'config' => [
//                         'label' => __('PitchPrint'),
//                         'sortOrder' => 50,
//                         'collapsible' => true,
//                         'componentType' => Fieldset::NAME
//                     ]
//                 ]
//             ],
//             'children' => [
//                 'product[pitch-print_prod-design]' => [
//                     'arguments' => [
//                         'data' => [
//                             'config' => [
//                                 'formElement' => 'select',
//                                 'componentType' => Field::NAME,
//                                 'options' => $this->getPpDesigns(),
// //                                 [
// //                                     ['value' => 'test_value_1', 'label' => 'Test Value 1'],
// //                                     ['value' => 'test_value_2', 'label' => 'Test Value 2'],
// //                                     ['value' => 'test_value_3', 'label' => 'Test Value 3'],
// //                                 ],
//                                 'visible' => 1,
//                                 'required' => 1,
//                                 'label' => __('Choose a design')
//                             ]
//                         ]
//                     ]
//                 ]
//             ]
//         ];
        
        
// 		return $meta;
//     }
    
	private function createSingleItem ($item) { 
		return [ 'value' => $item->id, 'label' => '&nbsp; &nbsp; &nbsp; Â» ' . $item->title ]; 
	}
	
	private function createListItems ( $items, &$options ) { 
		foreach ( $items as $design ) {
			$options[] = $this->createSingleItem($design); 
		}
	}
	
    private function createList( $designs )
    {
    	$options = static::PP_FIRST_SELECT_ELEMENT;
		
        foreach( $designs as $data ) {		
			$options[] = [ 'value' => $data->id, 'label' => $data->title ];
        	
			if ( isset( $data->items ) && count( $data->items ) ) {
				$this->createListItems( $data->items, $options );
			}
        }
// 		echo '2<br/>';
// 		print_r($options);die();
        return $options;
    }
    
    private function fetchPpDesigns( $credentials )
    {
        define('PITCH_APIKEY', $credentials['api_key']);
        define('PITCH_SECRETKEY', $credentials['secret_key']);

        function generateSignature () {
            $timestamp = time();
            $signature = md5(PITCH_APIKEY . PITCH_SECRETKEY . $timestamp);
            return array ('timestamp'=>$timestamp, 'apiKey'=>PITCH_APIKEY, 'signature'=>$signature);
        }

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "https://api.pitchprint.io/runtime/fetch-designs");
        curl_setopt($ch, CURLOPT_POST, true);

        $opts = generateSignature();
//         $opts['designId'] = 'your-design-id-here';

        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($opts));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        $output = curl_exec($ch);
        
        $designs = json_decode($output);
        
//         echo "<pre>1<br/>";
//         print_r($designs);die();
//         echo 'eish';
		
        if ( isset($designs->data) && count($designs->data) ) {
// 			echo '1.5<br/>';
            return $this->createList($designs->data);
        }
// 		echo 'scary';
//         echo '3';
        return static::PP_FIRST_SELECT_ELEMENT;
    }
    
    private function getPpDesigns()
    {
    	$objectManager  = \Magento\Framework\App\ObjectManager::getInstance();
       	$resource       = $objectManager->get('Magento\Framework\App\ResourceConnection');
    	$db             = $resource->getConnection();
        $tableName      = $resource->getTableName('pitch_print');
        
        $credentials	= $db->fetchAll("SELECT * FROM $tableName");
        
        if ( isset( $credentials[0] ) ) {
        	return $this->fetchPpDesigns( $credentials[0] );    
        }
        
//        print_r($credentials);die();
        return static::PP_FIRST_SELECT_ELEMENT;
    }
    
    /**
     * {@inheritdoc}
     */
//     public function modifyData(array $data)
//     {
//         return $data;
//     } 
}
